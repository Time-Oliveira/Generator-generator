# 定义语法规则部分
syntax:
  - rule: E -> SF
    actions:
      - F.dif := generator_difficult
      - S.dif := F.dif / 2
      - F.dif := F.dif / 2
  - rule: S -> Select A
    actions:
      - A.dif := S.dif
  - rule: A -> Attribute
    actions:
      - Attribute.dif := A.dif
      - Attribute.type := select(Table.name, Attribute.dif)
  - rule: F -> From T
    actions:
      - I.dif := F.dif
  - rule: T -> Table
    actions:
      - Table.dif := I.dif
      - Table.type := rand(SymbolTable, Table.dif)
      - Table.value := rand(Table.type, Table.dif)

# 定义属性部分
attributes:
  - name: GPA
    type: CustomFloat
    params: [1, 1.0, 4.0]
  - name: Major
    type: CustomString
    params: [20]
  - name: Location
    type: CustomString
    params: [30]
  - name: ID
    type: CustomInt
    params: [1000, 9999]
  - name: Age
    type: CustomInt
    params: [18, 25]
  - name: Name
    type: CustomString
    params: [10]
  - name: Unit
    type: RandomSelector
    params: [1.0, 2.0, 3.0, 4.0]
  - name: Classroom
    type: CustomString
    params: [5]

# 定义表格部分
tables:
  - name: Course
    attributes: [ID, Name, Unit, Classroom]
  - name: Student
    attributes: [ID, GPA, Age]
  - name: School
    attributes: [Major, Location]

# 难度系数
generator_difficult: 0

# 函数类型定义
# 定义语法规则部分
syntax:
  - rule: E -> SF
    actions:
      - F.dif := generator_difficult
      - S.dif := F.dif / 2
      - F.dif := F.dif / 2
  - rule: S -> Select A
    actions:
      - A.dif := S.dif
  - rule: A -> Attribute
    actions:
      - Attribute.dif := A.dif
      - Attribute.type := select(Table.type, Attribute.dif)
  - rule: F -> From T
    actions:
      - I.dif := F.dif
  - rule: T -> Table
    actions:
      - Table.dif := I.dif
      - Table.type := rand(SymbolTable, Table.dif)
      - Table.value := generate(Table.type, Table.dif)

# 定义属性部分
attributes:
  - name: GPA
    type: CustomFloat
    params: [1, 1.0, 4.0]
  - name: Major
    type: CustomString
    params: [20]
  - name: Location
    type: CustomString
    params: [30]
  - name: ID
    type: CustomInt
    params: [1000, 9999]
  - name: Age
    type: CustomInt
    params: [18, 25]
  - name: Name
    type: CustomString
    params: [10]
  - name: Unit
    type: RandomSelector
    params: [1.0, 2.0, 3.0, 4.0]
  - name: Classroom
    type: CustomString
    params: [5]

# 定义表格部分
tables:
  - name: Course
    attributes: [ID, Name, Unit, Classroom]
  - name: Student
    attributes: [ID, GPA, Age]
  - name: School
    attributes: [Major, Location]

# 难度系数
generator_difficult: 10

functions:
  rand:
    params:
      - name: input_list
        type: list
      - name: difficulty
        type: int
    return_type: any
    implementation: |
      import random
      def rand(input_list, difficulty):
          # 随机选择一个列表中的元素，难度系数可影响选择概率
          filtered_items = [item for item in input_list if item['dif'] == difficulty]
          if not filtered_items:
              return random.choice(input_list)
          return random.choice(filtered_items)

  select:
    params:
      - name: input_list
        type: list
      - name: difficulty
        type: int
    return_type: list
    implementation: |
      def select(input_list, difficulty):
          # 基于难度系数选择列表中的元素, 目前返回所有属性
          return input_list

  generate:
    params:
      - name: table_type
        type: str
      - name: difficulty
        type: int
    return_type: list
    implementation: |
      def generate(table_type, difficulty):
          # 生成5行表格，后续可根据difficulty修改生成数量
          return [f"{table_type}_row_{i+1}" for i in range(5)]

